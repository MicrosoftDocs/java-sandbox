### YamlMime:JavaType
uid: "com.microsoft.samples.SuperHero"
fullName: "com.microsoft.samples.SuperHero"
name: "SuperHero"
nameWithType: "SuperHero"
summary: "Hero is the main entity we will be using to something"
inheritances:
- "<xref href=\"java.lang.Object?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"com.microsoft.samples.subpackage.Person?displayProperty=fullName\" data-throw-if-not-resolved=\"False\" />"
inheritedMembers:
- "com.microsoft.samples.subpackage.Person.buildPerson(com.microsoft.samples.subpackage.Person)"
- "com.microsoft.samples.subpackage.Person.getFirstName()"
- "com.microsoft.samples.subpackage.Person.getLastName()"
- "com.microsoft.samples.subpackage.Person.getSomeSet()"
- "com.microsoft.samples.subpackage.Person.setFirstName(java.lang.String)"
- "com.microsoft.samples.subpackage.Person.setLastName()"
- "com.microsoft.samples.subpackage.Person.setLastName(java.lang.String)"
- "java.lang.Object.clone()"
- "java.lang.Object.equals(java.lang.Object)"
- "java.lang.Object.finalize()"
- "java.lang.Object.getClass()"
- "java.lang.Object.hashCode()"
- "java.lang.Object.notify()"
- "java.lang.Object.notifyAll()"
- "java.lang.Object.toString()"
- "java.lang.Object.wait()"
- "java.lang.Object.wait(long)"
- "java.lang.Object.wait(long,int)"
syntax: "public class SuperHero extends Person implements Serializable, Cloneable"
constructors:
- uid: "com.microsoft.samples.SuperHero.SuperHero()"
  fullName: "com.microsoft.samples.SuperHero.SuperHero()"
  name: "SuperHero()"
  nameWithType: "SuperHero.SuperHero()"
  syntax: "public SuperHero()"
- uid: "com.microsoft.samples.SuperHero.SuperHero(java.lang.String,java.lang.String,int,int)"
  fullName: "com.microsoft.samples.SuperHero.SuperHero(String heroName, String uniquePower, int health, int defense)"
  name: "SuperHero(String heroName, String uniquePower, int health, int defense)"
  nameWithType: "SuperHero.SuperHero(String heroName, String uniquePower, int health, int defense)"
  parameters:
  - name: "heroName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "uniquePower"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  - name: "health"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - name: "defense"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public SuperHero(String heroName, String uniquePower, int health, int defense)"
fields:
- uid: "com.microsoft.samples.SuperHero.SOME_PUBLIC_STRING"
  fullName: "com.microsoft.samples.SuperHero.SOME_PUBLIC_STRING"
  name: "SOME_PUBLIC_STRING"
  nameWithType: "SuperHero.SOME_PUBLIC_STRING"
  modifiers:
  - "final"
  field:
    value: "So important string value"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public final String SOME_PUBLIC_STRING"
methods:
- uid: "com.microsoft.samples.SuperHero.<V>ReturnNull(java.lang.Class<V>)"
  fullName: "com.microsoft.samples.SuperHero.<V>ReturnNull(Class<V> aClass)"
  name: "<V>ReturnNull(Class<V> aClass)"
  nameWithType: "SuperHero.<V>ReturnNull(Class<V> aClass)"
  summary: "Returns a FileStoreAttributeView of the given type."
  parameters:
  - description: "a class"
    name: "aClass"
    type: "<xref href=\"java.lang.Class?alt=java.lang.Class&text=Class\" data-throw-if-not-resolved=\"False\" />&lt;<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />&gt;"
  syntax: "public V <V>ReturnNull(Class<V> aClass)"
  desc: "Returns a FileStoreAttributeView of the given type.\n\nThis method always returns null as no <xref uid=\"\" data-throw-if-not-resolved=\"false\" data-raw-source=\"FileStoreAttributeView\"></xref> is currently supported."
  returns:
    description: "null"
    type: "<xref href=\"V?alt=V&text=V\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.getDefense()"
  fullName: "com.microsoft.samples.SuperHero.getDefense()"
  name: "getDefense()"
  nameWithType: "SuperHero.getDefense()"
  syntax: "public int getDefense()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.getHealth()"
  fullName: "com.microsoft.samples.SuperHero.getHealth()"
  name: "getHealth()"
  nameWithType: "SuperHero.getHealth()"
  modifiers:
  - "protected"
  syntax: "protected int getHealth()"
  returns:
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.getHeroName()"
  fullName: "com.microsoft.samples.SuperHero.getHeroName()"
  name: "getHeroName()"
  nameWithType: "SuperHero.getHeroName()"
  syntax: "public String getHeroName()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.getLastName()"
  fullName: "com.microsoft.samples.SuperHero.getLastName()"
  name: "getLastName()"
  nameWithType: "SuperHero.getLastName()"
  summary: "Get capitalized last name."
  overridden: "com.microsoft.samples.subpackage.Person.getLastName()"
  syntax: "public String getLastName()"
  desc: "Get capitalized last name. But it's not the end, because of multiline comment"
  returns:
    description: "lastName in uppercase. But it's not the end,\n because of multiline comment"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.getUniquePower()"
  fullName: "com.microsoft.samples.SuperHero.getUniquePower()"
  name: "getUniquePower()"
  nameWithType: "SuperHero.getUniquePower()"
  syntax: "public String getUniquePower()"
  returns:
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
- uid: "com.microsoft.samples.SuperHero.setDefense(int)"
  fullName: "com.microsoft.samples.SuperHero.setDefense(int defense)"
  name: "setDefense(int defense)"
  nameWithType: "SuperHero.setDefense(int defense)"
  parameters:
  - name: "defense"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setDefense(int defense)"
- uid: "com.microsoft.samples.SuperHero.setHealth(int)"
  fullName: "com.microsoft.samples.SuperHero.setHealth(int health)"
  name: "setHealth(int health)"
  nameWithType: "SuperHero.setHealth(int health)"
  modifiers:
  - "protected"
  parameters:
  - name: "health"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  syntax: "protected void setHealth(int health)"
- uid: "com.microsoft.samples.SuperHero.setHeroName(java.lang.String)"
  fullName: "com.microsoft.samples.SuperHero.setHeroName(String heroName)"
  name: "setHeroName(String heroName)"
  nameWithType: "SuperHero.setHeroName(String heroName)"
  parameters:
  - name: "heroName"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setHeroName(String heroName)"
- uid: "com.microsoft.samples.SuperHero.setUniquePower(java.lang.String)"
  fullName: "com.microsoft.samples.SuperHero.setUniquePower(String uniquePower)"
  name: "setUniquePower(String uniquePower)"
  nameWithType: "SuperHero.setUniquePower(String uniquePower)"
  parameters:
  - name: "uniquePower"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "public void setUniquePower(String uniquePower)"
- uid: "com.microsoft.samples.SuperHero.successfullyAttacked(int,java.lang.String)"
  fullName: "com.microsoft.samples.SuperHero.successfullyAttacked(int incomingDamage, String damageType)"
  name: "successfullyAttacked(int incomingDamage, String damageType)"
  nameWithType: "SuperHero.successfullyAttacked(int incomingDamage, String damageType)"
  summary: "This is a simple description of the method."
  deprecatedTag: "As of version 1.1, use . . . instead"
  parameters:
  - description: "the amount of incoming damage for <xref uid=\"com.microsoft.samples.SuperHero\" data-throw-if-not-resolved=\"false\" data-raw-source=\"SuperHero\"></xref>"
    name: "incomingDamage"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
  - description: "type of damage with similar word damageTypeLong, sure"
    name: "damageType"
    type: "<xref href=\"java.lang.String?alt=java.lang.String&text=String\" data-throw-if-not-resolved=\"False\" />"
  syntax: "@Deprecated\npublic int successfullyAttacked(int incomingDamage, String damageType)"
  exceptions:
  - description: "when incomingDamage is negative and thanks for <xref uid=\"Exception\" data-throw-if-not-resolved=\"false\" data-raw-source=\"Exception\"></xref>"
    type: "<xref href=\"java.lang.IllegalArgumentException?alt=java.lang.IllegalArgumentException&text=IllegalArgumentException\" data-throw-if-not-resolved=\"False\" />"
  desc: "This is a simple description of the method. . . [Superman!][Superman]\n\n\n[Superman]: http://www.supermanisthegreatest.com"
  hasDeprecatedTag: true
  returns:
    description: "the amount of health hero has after attack"
    type: "<xref href=\"int?alt=int&text=int\" data-throw-if-not-resolved=\"False\" />"
type: "class"
desc: "Hero is the main entity we will be using to something"
implements:
- "<xref href=\"java.io.Serializable?alt=java.io.Serializable&text=Serializable\" data-throw-if-not-resolved=\"False\" />"
- "<xref href=\"java.lang.Cloneable?alt=java.lang.Cloneable&text=Cloneable\" data-throw-if-not-resolved=\"False\" />"
metadata: {}
package: "com.microsoft.samples"
